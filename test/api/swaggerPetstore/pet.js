/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * @fileDescription Everything about your Pets
 * @version 1.0.3
}
**/

import axios from "axios";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: `/v2/pet/${petId}`,
    method: "get",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: `/v2/pet/${petId}`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: `/v2/pet/${petId}`,
    method: "delete",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: `/v2/pet/${petId}/uploadImage`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: `/v2/pet`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: `/v2/pet`,
    method: "put",
    params: {},
    data: params
  });

/**
 * @description Finds Pets by status
 * @param {Object} params
 * @param {"available" | "pending" | "sold"} params.status - Status values that need to be considered for filter
 **/
export const findPetsByStatus = (params) =>
  axios.request({
    url: `/v2/pet/findByStatus`,
    method: "get",
    params: params,
    data: {}
  });

/**
 * @deprecated
 * @description Finds Pets by tags
 * @param {Object} params
 * @param {string} params.tags - Tags to filter by
 **/
export const findPetsByTags = (params) =>
  axios.request({
    url: `/v2/pet/findByTags`,
    method: "get",
    params: params,
    data: {}
  });
