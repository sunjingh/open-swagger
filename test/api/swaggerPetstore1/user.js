/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * @fileDescription Operations about user
 * @version 1.0.3
}
**/

import axios from "axios";

/**
 * @description Get user by user name
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: `/v2/user/${username}`,
    method: "get",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params - Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username - name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: `/v2/user/${username}`,
    method: "put",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: `/v2/user/${username}`,
    method: "delete",
    params: {},
    data: {}
  });

/**
 * @description Logs user into the system
 * @param {Object} params
 * @param {string} params.username - The user name for login
 * @param {string} params.password - The password for login in clear text
 **/
export const loginUser = (params) =>
  axios.request({
    url: `/v2/user/login`,
    method: "get",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: `/v2/user/logout`,
    method: "get",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params - Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: `/v2/user`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: `/v2/user/createWithArray`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: `/v2/user/createWithList`,
    method: "post",
    params: {},
    data: params
  });
