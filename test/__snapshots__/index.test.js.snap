// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api test base option 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Everything about your Pets
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Finds Pets by status
 * @param {Object} params
 * @param {\\"available\\" | \\"pending\\" | \\"sold\\"} params.status - Status values that need to be considered for filter
 **/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @deprecated
 * @description Finds Pets by tags
 * @param {Object} params
 * @param {string} params.tags - Tags to filter by
 **/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test base option 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Access to Petstore orders
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params - order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test base option 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @version 1.0.3
}
**/

/**
 * @typedef Category
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef Pet
 * @property {number} id
 * @property {Category} category
 * @property {string} name
 * @property {string[]} photoUrls
 * @property {Tag[]} tags
 * @property {\\"available\\" | \\"pending\\" | \\"sold\\"} status - pet status in the store
**/

/**
 * @typedef Tag
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef ApiResponse
 * @property {number} code
 * @property {string} type
 * @property {string} message
**/

/**
 * @typedef Order
 * @property {number} id
 * @property {number} petId
 * @property {number} quantity
 * @property {string} shipDate
 * @property {\\"placed\\" | \\"approved\\" | \\"delivered\\"} status - Order Status
 * @property {boolean} complete
**/

/**
 * @typedef User
 * @property {number} id
 * @property {string} username
 * @property {string} firstName
 * @property {string} lastName
 * @property {string} email
 * @property {string} password
 * @property {string} phone
 * @property {number} userStatus - User Status
**/"
`;

exports[`api test base option 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Operations about user
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params - Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username - name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Logs user into the system
 * @param {Object} params
 * @param {string} params.username - The user name for login
 * @param {string} params.password - The password for login in clear text
 **/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params - Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test custom ts template 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0
}
**/

import { DeviceRegistrationInfo } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getDevices = (params: { skip?: number; limit?: number }) =>
  axios.request<string[]>({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

export const register = (params: DeviceRegistrationInfo) =>
  axios.request<any>({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test custom ts template 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0
}
**/

import {
  TemperatureSummary,
  ForecastResponse,
  TemperatueZoneStatus,
  HeaterState,
  ApiResponse
} from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const temperatureSummary = () =>
  axios.request<TemperatureSummary>({
    url: \`/yeyan1996/IOT/1.0.0/temperature\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getForecast = (
  _NOOP: Record<string, never>,
  {
    days
  }: {
    days: number;
  }
) =>
  axios.request<ForecastResponse>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/forecast/\${days}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getZoneTemperature = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<TemperatueZoneStatus>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const getHeaterState = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<HeaterState>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setHeaterState = (
  _NOOP: Record<string, never>,
  {
    zoneId,
    state
  }: {
    zoneId: string;
    state: string;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater/\${state}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test custom ts template 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0
}
**/

/** ok */
export interface LightingSummary {
  zones?: LightingZone[];
  zoneStatus?: LightingZoneStatus[];
}

export interface LightingZone {
  id?: string;
  name?: string;
  deviceId?: number;
  deviceType?: \\"dimmer\\" | \\"switch\\";
  zone?: string;
}

/** the status of the lighting zone. */
export interface LightingZoneStatus {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

/** ok */
export interface TemperatureSummary {
  zones?: TemperatureZone[];
  zoneStatus?: TemperatueZoneStatus[];
}

/** a single temperature zone */
export interface TemperatureZone {
  /** the unique identifier for the zone */
  id: number;
  name: string;
  inputPosition?: number;
  outputPosition?: number;
  zone?: string;
}

/** status of a single zone */
export interface TemperatueZoneStatus {
  /** the unique identifier for the zone */
  id: string;
  /** the name of the zone */
  name?: string;
  /** the temperature in the zone */
  value: number;
  /** the temperature units */
  units?: \\"celsius\\" | \\"fahrenheit\\";
  /** the timestamp when the temperature was measured */
  timestamp: string;
}

export interface ApiResponse {
  code?: number;
  message?: string;
}

export interface HeaterState {
  id?: string;
  state?: string;
}

export interface DeviceState {
  id?: string;
  name?: string;
  lastUpdate?: string;
  level?: number;
}

export interface ForecastResponse {
  city?: City;
  values?: Forecast[];
}

export interface Forecast {
  date?: string;
  pressure?: number;
  humidity?: number;
  windSpeed?: number;
  clouds?: number;
  temperature?: ForecastTemperature;
  weather?: WeatherForecast;
}

export interface City {
  id?: number;
  name?: string;
  lat?: number;
  lon?: number;
  country?: string;
}

export interface ForecastTemperature {
  low?: number;
  high?: number;
  morning?: number;
  day?: number;
  evening?: number;
  night?: number;
}

export interface WeatherForecast {
  summary?: string;
  description?: string;
  icon?: string;
}

export interface DeviceRegistrationInfo {
  uri?: string;
  id?: string;
}"
`;

exports[`api test custom ts template 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0
}
**/

import { ApiResponse, DeviceState, LightingSummary } from \\"./interface/index.ts\\";
import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const setDimmer = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setDimmerTimer = (
  params: {
    units?: string;
  },
  {
    deviceId,
    value,
    timeunit
  }: {
    deviceId: string;
    value: number;
    timeunit: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}/timer/\${timeunit}\`,
    method: \\"post\\",
    params: params,
    data: {}
  });

export const getSwitchState = (
  _NOOP: Record<string, never>,
  {
    deviceId
  }: {
    deviceId: string;
  }
) =>
  axios.request<DeviceState>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const setSwitch = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value
  }: {
    deviceId: string;
    value: string;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const setSwitchTimer = (
  _NOOP: Record<string, never>,
  {
    deviceId,
    value,
    minutes
  }: {
    deviceId: string;
    value: string;
    minutes: number;
  }
) =>
  axios.request<ApiResponse>({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}/timer/\${minutes}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

export const getLightingSummary = () =>
  axios.request<LightingSummary>({
    url: \`/yeyan1996/IOT/1.0.0/lightingSummary\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test custom ts template 5`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0
}
**/

import { AxiosResponse } from \\"axios\\";
import http from \\"http\\";

export const getZones = () =>
  axios.request<string[]>({
    url: \`/yeyan1996/IOT/1.0.0/zones\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

export const quietZone = (
  _NOOP: Record<string, never>,
  {
    zoneId
  }: {
    zoneId: string;
  }
) =>
  axios.request<any>({
    url: \`/yeyan1996/IOT/1.0.0/zones/\${zoneId}/quiet\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work in openApi3 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0-oas3
}
**/

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} params
 * @param {number} params.skip - number of records to skip
 * @param {number} params.limit - max number of records to return
 **/
export const getDevices = (params) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description
 * @param {DeviceRegistrationInfo} params
 **/
export const register = (params) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/devices\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test should work in openApi3 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0-oas3
}
**/

import axios from \\"axios\\";

/**
 * @description
 **/
export const temperatureSummary = () =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/temperature\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.days
 **/
export const getForecast = (_NOOP, { days }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/temperature/forecast/\${days}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.zoneId
 **/
export const getZoneTemperature = (_NOOP, { zoneId }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.zoneId
 **/
export const getHeaterState = (_NOOP, { zoneId }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.zoneId
 * @param {string} pathParams.state
 **/
export const setHeaterState = (_NOOP, { zoneId, state }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/temperature/\${zoneId}/heater/\${state}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work in openApi3 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0-oas3
}
**/

/**
 * @typedef LightingSummary - ok
 * @property {LightingZone[]} zones
 * @property {LightingZoneStatus[]} zoneStatus
**/

/**
 * @typedef LightingZone
 * @property {string} id
 * @property {string} name
 * @property {number} deviceId
 * @property {\\"dimmer\\" | \\"switch\\"} deviceType
 * @property {string} zone
**/

/**
 * @typedef LightingZoneStatus - the status of the lighting zone.
 * @property {string} id
 * @property {string} name
 * @property {string} lastUpdate
 * @property {number} level
**/

/**
 * @typedef TemperatureSummary - ok
 * @property {TemperatureZone[]} zones
 * @property {TemperatueZoneStatus[]} zoneStatus
**/

/**
 * @typedef TemperatureZone - a single temperature zone
 * @property {number} id - the unique identifier for the zone
 * @property {string} name
 * @property {number} inputPosition
 * @property {number} outputPosition
 * @property {string} zone
**/

/**
 * @typedef TemperatueZoneStatus - status of a single zone
 * @property {string} id - the unique identifier for the zone
 * @property {string} name - the name of the zone
 * @property {number} value - the temperature in the zone
 * @property {\\"celsius\\" | \\"fahrenheit\\"} units - the temperature units
 * @property {string} timestamp - the timestamp when the temperature was measured
**/

/**
 * @typedef ApiResponse
 * @property {number} code
 * @property {string} message
**/

/**
 * @typedef HeaterState
 * @property {string} id
 * @property {string} state
**/

/**
 * @typedef DeviceState
 * @property {string} id
 * @property {string} name
 * @property {string} lastUpdate
 * @property {number} level
**/

/**
 * @typedef ForecastResponse
 * @property {City} city
 * @property {Forecast[]} values
**/

/**
 * @typedef Forecast
 * @property {string} date
 * @property {number} pressure
 * @property {number} humidity
 * @property {number} windSpeed
 * @property {number} clouds
 * @property {ForecastTemperature} temperature
 * @property {WeatherForecast} weather
**/

/**
 * @typedef City
 * @property {number} id
 * @property {string} name
 * @property {number} lat
 * @property {number} lon
 * @property {string} country
**/

/**
 * @typedef ForecastTemperature
 * @property {number} low
 * @property {number} high
 * @property {number} morning
 * @property {number} day
 * @property {number} evening
 * @property {number} night
**/

/**
 * @typedef WeatherForecast
 * @property {string} summary
 * @property {string} description
 * @property {string} icon
**/

/**
 * @typedef DeviceRegistrationInfo
 * @property {string} uri
 * @property {string} id
**/"
`;

exports[`api test should work in openApi3 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0-oas3
}
**/

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.deviceId
 * @param {number} pathParams.value
 **/
export const setDimmer = (_NOOP, { deviceId, value }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} params
 * @param {string} params.units
 * @param {Object} pathParams
 * @param {string} pathParams.deviceId
 * @param {number} pathParams.value
 * @param {number} pathParams.timeunit
 **/
export const setDimmerTimer = (params, { deviceId, value, timeunit }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lighting/dimmers/\${deviceId}/\${value}/timer/\${timeunit}\`,
    method: \\"post\\",
    params: params,
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.deviceId
 **/
export const getSwitchState = (_NOOP, { deviceId }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.deviceId
 * @param {string} pathParams.value
 **/
export const setSwitch = (_NOOP, { deviceId, value }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.deviceId
 * @param {string} pathParams.value
 * @param {number} pathParams.minutes
 **/
export const setSwitchTimer = (_NOOP, { deviceId, value, minutes }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lighting/switches/\${deviceId}/\${value}/timer/\${minutes}\`,
    method: \\"post\\",
    params: {},
    data: {}
  });

/**
 * @description
 **/
export const getLightingSummary = () =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/lightingSummary\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work in openApi3 5`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title home-iot-api
 * @description The API for the EatBacon IOT project
 * @version 1.0.0-oas3
}
**/

import axios from \\"axios\\";

/**
 * @description
 **/
export const getZones = () =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/zones\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.zoneId
 **/
export const quietZone = (_NOOP, { zoneId }) =>
  axios.request({
    url: \`/yeyan1996/IOT/1.0.0/zones/\${zoneId}/quiet\`,
    method: \\"get\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work with only one json params 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} params
 * @param {string} params.StartDate
 **/
export const GetAuditLogs = (params) =>
  axios.request({
    url: \`/v1/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one json params 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象
 * @param {SwaggerList<void>} params - 设备地理坐标信息集合
 **/
export const uploadLngLatUsingPOST = (params) =>
  axios.request({
    url: \`/v1/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test should work with only one json params 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description Price Estimates
 * @param {Object} params
 * @param {number} params.start_latitude - Latitude component of start location.
 * @param {number} params.start_longitude - Longitude component of start location.
 * @param {number} params.end_latitude - Latitude component of end location.
 * @param {number} params.end_longitude - Longitude component of end location.
 **/
export const priceByGet = (params) =>
  axios.request({
    url: \`/v1/estimates/price\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Time Estimates
 * @param {Object} params
 * @param {number} params.start_latitude - Latitude component of start location.
 * @param {number} params.start_longitude - Longitude component of start location.
 * @param {string} params.customer_uuid - Unique customer identifier to be used for experience customization.
 * @param {string} params.product_id - Unique identifier representing a specific product for a given latitude & longitude.
 **/
export const timeByGet = (params) =>
  axios.request({
    url: \`/v1/estimates/time\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one json params 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.id
 **/
export const UpdateMapper = (_NOOP, { id }) =>
  axios.request({
    url: \`/v1/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work with only one json params 5`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description Product Types
 * @param {Object} params
 * @param {number} params.latitude - Latitude component of location.
 * @param {number} params.longitude - Longitude component of location.
 **/
export const productsByGet = (params) =>
  axios.request({
    url: \`/v1/products\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one json params 6`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description Product Types
 * @param {Object} params
 * @param {number} params.latitude - Latitude component of location.
 * @param {number} params.longitude - Longitude component of location.
 **/
export const productsTestByGet = (params) =>
  axios.request({
    url: \`/v1/products-test\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one json params 7`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

/**
 * @typedef Product
 * @property {string} product_id - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
 * @property {string} description - Description of product.
 * @property {string} display_name - Display name of product.
 * @property {string} capacity - Capacity of product. For example, 4 people.
 * @property {string} image - Image URL representing the product.
**/

/**
 * @typedef PriceEstimate
 * @property {string} product_id - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
 * @property {string} currency_code - [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
 * @property {string} display_name - Display name of product.
 * @property {string} estimate - Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI.
 * @property {number} low_estimate - Lower bound of the estimated price.
 * @property {number} high_estimate - Upper bound of the estimated price.
 * @property {number} surge_multiplier - Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
**/

/**
 * @typedef Profile
 * @property {string} first_name - First name of the Uber user.
 * @property {string} last_name - Last name of the Uber user.
 * @property {string} email - Email address of the Uber user
 * @property {string} picture - Image URL of the Uber user.
 * @property {string} promo_code - Promo code of the Uber user.
 * @property {RoleType} role
**/

/**
 * @typedef Activity
 * @property {string} uuid - Unique identifier for the activity
**/

/**
 * @typedef Activities
 * @property {number} offset - Position in pagination.
 * @property {number} limit - Number of items to retrieve (100 max).
 * @property {number} count - Total number of items available.
 * @property {Activity[]} history
**/

/**
  * @typedef {(\\"Admin\\" | \\"User\\" | \\"SetSms\\")} RoleType - Enumeration of Role Type
**/

/**
 * @typedef CreateOrUpdateUserInput
 * @property {number} userId - 用户ID(ID来自User表)
 * @property {(\\"View\\" | \\"Operate\\" | \\"Auth\\" | \\"Search\\" | \\"Delete\\" | \\"UserManage\\" | \\"UserConfig\\" | \\"SetTime\\" | \\"SetNetwork\\" | \\"SetSms\\" | \\"SystemManage\\")[]} userRights - 用户权限
**/

/**
 * @typedef Abc
 * @property {string} id
 * @property {boolean} isLow
**/

/**
  * @typedef {(Abc[])} ArrayOfAbc
**/

/**
 * @typedef NumberArrayEnumModel
 * @property {(\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[]} foo
 * @property {(\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[]} bar
**/

/**
 * @typedef Error
 * @property {number} code
 * @property {string} message
 * @property {string} fields
**/

/**
 * @typedef PagedResultDto
 * @property {number} totalCount
 * @property {T[]} items
**/

/**
 * @typedef AuditLogListDto
 * @property {number} userId
 * @property {number} id
**/

/**
 * @typedef JsonResult - 接口返回结果
 * @property {boolean} result - 结果
 * @property {\\"Success\\" | \\"Timeout\\" | \\"Fail\\" | \\"Expired\\" | \\"Error\\" | \\"InternalServerError\\" | \\"InvalidAnonymousAccess\\" | \\"UserSessionExpired\\" | \\"UserIsBinded\\"} code - 代码
 * @property {string} data - 数据
 * @property {string} message - 消息
**/"
`;

exports[`api test should work with only one json params 8`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description User Profile
 **/
export const meByGet = () =>
  axios.request({
    url: \`/v1/me\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description User Activity
 * @param {Object} params
 * @param {number} params.offset - Offset the list of returned results by this amount. Default is zero.
 * @param {number} params.limit - Number of items to retrieve. Default is 5, maximum is 100.
 **/
export const historyByGet = (params) =>
  axios.request({
    url: \`/v1/history\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one json params 9`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/**
 * @description 新增或编辑标准票, 需走审批流程
 **/
export const AddOrUpdateTicketTypical = () =>
  axios.request({
    url: \`/v1/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test should work with only one string params 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Everything about your Pets
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Finds Pets by status
 * @param {Object} params
 * @param {\\"available\\" | \\"pending\\" | \\"sold\\"} params.status - Status values that need to be considered for filter
 **/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @deprecated
 * @description Finds Pets by tags
 * @param {Object} params
 * @param {string} params.tags - Tags to filter by
 **/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test should work with only one string params 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Access to Petstore orders
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params - order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test should work with only one string params 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @version 1.0.3
}
**/

/**
 * @typedef Category
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef Pet
 * @property {number} id
 * @property {Category} category
 * @property {string} name
 * @property {string[]} photoUrls
 * @property {Tag[]} tags
 * @property {\\"available\\" | \\"pending\\" | \\"sold\\"} status - pet status in the store
**/

/**
 * @typedef Tag
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef ApiResponse
 * @property {number} code
 * @property {string} type
 * @property {string} message
**/

/**
 * @typedef Order
 * @property {number} id
 * @property {number} petId
 * @property {number} quantity
 * @property {string} shipDate
 * @property {\\"placed\\" | \\"approved\\" | \\"delivered\\"} status - Order Status
 * @property {boolean} complete
**/

/**
 * @typedef User
 * @property {number} id
 * @property {string} username
 * @property {string} firstName
 * @property {string} lastName
 * @property {string} email
 * @property {string} password
 * @property {string} phone
 * @property {number} userStatus - User Status
**/"
`;

exports[`api test should work with only one string params 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Operations about user
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params - Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username - name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Logs user into the system
 * @param {Object} params
 * @param {string} params.username - The user name for login
 * @param {string} params.password - The password for login in clear text
 **/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params - Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test simple jsdoc 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Everything about your Pets
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Find pet by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to return
 **/
export const getPetById = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updates a pet in the store with form data
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet that needs to be updated
 **/
export const updatePetWithForm = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Deletes a pet
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.petId - Pet id to delete
 **/
export const deletePet = (_NOOP, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description uploads an image
 * @param {FormData} params
 * @param {Object} pathParams
 * @param {number} pathParams.petId - ID of pet to update
 **/
export const uploadFile = (params, { petId }) =>
  axios.request({
    url: \`/v2/pet/\${petId}/uploadImage\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Add a new pet to the store
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const addPet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Update an existing pet
 * @param {Pet} params - Pet object that needs to be added to the store
 **/
export const updatePet = (params) =>
  axios.request({
    url: \`/v2/pet\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Finds Pets by status
 * @param {Object} params
 * @param {\\"available\\" | \\"pending\\" | \\"sold\\"} params.status - Status values that need to be considered for filter
 **/
export const findPetsByStatus = (params) =>
  axios.request({
    url: \`/v2/pet/findByStatus\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @deprecated
 * @description Finds Pets by tags
 * @param {Object} params
 * @param {string} params.tags - Tags to filter by
 **/
export const findPetsByTags = (params) =>
  axios.request({
    url: \`/v2/pet/findByTags\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test simple jsdoc 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Access to Petstore orders
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Returns pet inventories by status
 **/
export const getInventory = () =>
  axios.request({
    url: \`/v2/store/inventory\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Find purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of pet that needs to be fetched
 **/
export const getOrderById = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Delete purchase order by ID
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {number} pathParams.orderId - ID of the order that needs to be deleted
 **/
export const deleteOrder = (_NOOP, { orderId }) =>
  axios.request({
    url: \`/v2/store/order/\${orderId}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Place an order for a pet
 * @param {Order} params - order placed for purchasing the pet
 **/
export const placeOrder = (params) =>
  axios.request({
    url: \`/v2/store/order\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test simple jsdoc 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @version 1.0.3
}
**/

/**
 * @typedef Category
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef Pet
 * @property {number} id
 * @property {Category} category
 * @property {string} name
 * @property {string[]} photoUrls
 * @property {Tag[]} tags
 * @property {\\"available\\" | \\"pending\\" | \\"sold\\"} status - pet status in the store
**/

/**
 * @typedef Tag
 * @property {number} id
 * @property {string} name
**/

/**
 * @typedef ApiResponse
 * @property {number} code
 * @property {string} type
 * @property {string} message
**/

/**
 * @typedef Order
 * @property {number} id
 * @property {number} petId
 * @property {number} quantity
 * @property {string} shipDate
 * @property {\\"placed\\" | \\"approved\\" | \\"delivered\\"} status - Order Status
 * @property {boolean} complete
**/

/**
 * @typedef User
 * @property {number} id
 * @property {string} username
 * @property {string} firstName
 * @property {string} lastName
 * @property {string} email
 * @property {string} password
 * @property {string} phone
 * @property {number} userStatus - User Status
**/"
`;

exports[`api test simple jsdoc 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Swagger Petstore
 * @description This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 * @fileDescription Operations about user
 * @version 1.0.3
}
**/

import axios from \\"axios\\";

/**
 * @description Get user by user name
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be fetched. Use user1 for testing.
 **/
export const getUserByName = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Updated user
 * @param {User} params - Updated user object
 * @param {Object} pathParams
 * @param {string} pathParams.username - name that need to be updated
 **/
export const updateUser = (params, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"put\\",
    params: {},
    data: params
  });

/**
 * @description Delete user
 * @param {Object} _NOOP - never
 * @param {Object} pathParams
 * @param {string} pathParams.username - The name that needs to be deleted
 **/
export const deleteUser = (_NOOP, { username }) =>
  axios.request({
    url: \`/v2/user/\${username}\`,
    method: \\"delete\\",
    params: {},
    data: {}
  });

/**
 * @description Logs user into the system
 * @param {Object} params
 * @param {string} params.username - The user name for login
 * @param {string} params.password - The password for login in clear text
 **/
export const loginUser = (params) =>
  axios.request({
    url: \`/v2/user/login\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/**
 * @description Logs out current logged in user session
 **/
export const logoutUser = () =>
  axios.request({
    url: \`/v2/user/logout\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/**
 * @description Create user
 * @param {User} params - Created user object
 **/
export const createUser = (params) =>
  axios.request({
    url: \`/v2/user\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithArrayInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithArray\`,
    method: \\"post\\",
    params: {},
    data: params
  });

/**
 * @description Creates list of users with given input array
 * @param {User[]} params - List of user object
 **/
export const createUsersWithListInput = (params) =>
  axios.request({
    url: \`/v2/user/createWithList\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test ts language 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

export const GetAuditLogs = (params: { StartDate?: string }) =>
  axios.request<IPagedResult<AuditLogListDto>>({
    url: \`/v1/api/services/app/AuditLog/GetAuditLogs\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test ts language 2`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

/** 分页上传设备地理坐标信息, 参数list的值为 List<DeviceLngLat>, 返回Result对象 */
export const uploadLngLatUsingPOST = (params: SwaggerList<void>) =>
  axios.request<any>({
    url: \`/v1/dev/uploadLngLat\`,
    method: \\"post\\",
    params: {},
    data: params
  });
"
`;

exports[`api test ts language 3`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import { PriceEstimate, Product } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** Price Estimates */
export const priceByGet = (params: {
  start_latitude: number;
  start_longitude: number;
  end_latitude: number;
  end_longitude: number;
}) =>
  axios.request<PriceEstimate[]>({
    url: \`/v1/estimates/price\`,
    method: \\"get\\",
    params: params,
    data: {}
  });

/** Time Estimates */
export const timeByGet = (params: {
  start_latitude: number;
  start_longitude: number;
  customer_uuid?: string;
  product_id?: string;
}) =>
  axios.request<Product[]>({
    url: \`/v1/estimates/time\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test ts language 4`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

export interface Product {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. */
  product_id?: string;
  /** Description of product. */
  description?: string;
  /** Display name of product. */
  display_name?: string;
  /** Capacity of product. For example, 4 people. */
  capacity?: string;
  /** Image URL representing the product. */
  image?: string;
}

export interface PriceEstimate {
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles */
  product_id?: string;
  /** [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code. */
  currency_code?: string;
  /** Display name of product. */
  display_name?: string;
  /** Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI. */
  estimate?: string;
  /** Lower bound of the estimated price. */
  low_estimate?: number;
  /** Upper bound of the estimated price. */
  high_estimate?: number;
  /** Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier. */
  surge_multiplier?: number;
}

export interface Profile {
  /** First name of the Uber user. */
  first_name?: string;
  /** Last name of the Uber user. */
  last_name?: string;
  /** Email address of the Uber user */
  email?: string;
  /** Image URL of the Uber user. */
  picture?: string;
  /** Promo code of the Uber user. */
  promo_code?: string;
  role?: RoleType;
}

export interface Activity {
  /** Unique identifier for the activity */
  uuid?: string;
}

export interface Activities {
  /** Position in pagination. */
  offset?: number;
  /** Number of items to retrieve (100 max). */
  limit?: number;
  /** Total number of items available. */
  count?: number;
  history?: Activity[];
}

/** Enumeration of Role Type */
export type RoleType = \\"Admin\\" | \\"User\\" | \\"SetSms\\";

export interface CreateOrUpdateUserInput {
  /** 用户ID(ID来自User表) */
  userId?: number;
  /** 用户权限 */
  userRights?: (
    | \\"View\\"
    | \\"Operate\\"
    | \\"Auth\\"
    | \\"Search\\"
    | \\"Delete\\"
    | \\"UserManage\\"
    | \\"UserConfig\\"
    | \\"SetTime\\"
    | \\"SetNetwork\\"
    | \\"SetSms\\"
    | \\"SystemManage\\"
  )[];
}

export interface Abc {
  id?: string;
  isLow?: boolean;
}

export type ArrayOfAbc = Abc[];

export interface NumberArrayEnumModel {
  foo?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[];
  bar?: (\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[];
}

export interface Error {
  code?: number;
  message?: string;
  fields?: string;
}

export interface PagedResultDto<T> {
  totalCount?: number;
  items?: T[];
}

export interface AuditLogListDto {
  userId?: number;
  id?: number;
}

/** 接口返回结果 */
export interface JsonResult<T> {
  /** 结果 */
  result?: boolean;
  /** 代码 */
  code?:
    | \\"Success\\"
    | \\"Timeout\\"
    | \\"Fail\\"
    | \\"Expired\\"
    | \\"Error\\"
    | \\"InternalServerError\\"
    | \\"InvalidAnonymousAccess\\"
    | \\"UserSessionExpired\\"
    | \\"UserIsBinded\\";
  /** 数据 */
  data?: string;
  /** 消息 */
  message?: string;
}"
`;

exports[`api test ts language 5`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import axios from \\"axios\\";

export const UpdateMapper = (
  _NOOP: Record<string, never>,
  {
    id
  }: {
    id: string;
  }
) =>
  axios.request<string>({
    url: \`/v1/crawler/v1/mapper/\${id}\`,
    method: \\"put\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test ts language 6`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import { Product } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** Product Types */
export const productsByGet = (params: { latitude: number; longitude: number }) =>
  axios.request<Product[]>({
    url: \`/v1/products\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test ts language 7`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import { Product } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** Product Types */
export const productsTestByGet = (params: { latitude: number; longitude: number }) =>
  axios.request<Product[]>({
    url: \`/v1/products-test\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test ts language 8`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import { Profile, Activities } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** User Profile */
export const meByGet = () =>
  axios.request<Profile>({
    url: \`/v1/me\`,
    method: \\"get\\",
    params: {},
    data: {}
  });

/** User Activity */
export const historyByGet = (params: { offset?: number; limit?: number }) =>
  axios.request<Activities>({
    url: \`/v1/history\`,
    method: \\"get\\",
    params: params,
    data: {}
  });
"
`;

exports[`api test ts language 9`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

import { JsonResult, Guid } from \\"./interface/index.ts\\";
import axios from \\"axios\\";

/** 新增或编辑标准票, 需走审批流程 */
export const AddOrUpdateTicketTypical = () =>
  axios.request<JsonResult<Guid>>({
    url: \`/v1/api/services/app/YmTicketTypical/AddOrUpdateTicketTypical\`,
    method: \\"post\\",
    params: {},
    data: {}
  });
"
`;

exports[`api test type only 1`] = `
"/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger
 * @see https://www.npmjs.com/package/free-swagger
 * @title Uber API
 * @description Move your app forward with the Uber API
 * @version 1.0.0
}
**/

/**
 * @typedef Product
 * @property {string} product_id - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
 * @property {string} description - Description of product.
 * @property {string} display_name - Display name of product.
 * @property {string} capacity - Capacity of product. For example, 4 people.
 * @property {string} image - Image URL representing the product.
**/

/**
 * @typedef PriceEstimate
 * @property {string} product_id - Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
 * @property {string} currency_code - [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
 * @property {string} display_name - Display name of product.
 * @property {string} estimate - Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \\"Metered\\" for TAXI.
 * @property {number} low_estimate - Lower bound of the estimated price.
 * @property {number} high_estimate - Upper bound of the estimated price.
 * @property {number} surge_multiplier - Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
**/

/**
 * @typedef Profile
 * @property {string} first_name - First name of the Uber user.
 * @property {string} last_name - Last name of the Uber user.
 * @property {string} email - Email address of the Uber user
 * @property {string} picture - Image URL of the Uber user.
 * @property {string} promo_code - Promo code of the Uber user.
 * @property {RoleType} role
**/

/**
 * @typedef Activity
 * @property {string} uuid - Unique identifier for the activity
**/

/**
 * @typedef Activities
 * @property {number} offset - Position in pagination.
 * @property {number} limit - Number of items to retrieve (100 max).
 * @property {number} count - Total number of items available.
 * @property {Activity[]} history
**/

/**
  * @typedef {(\\"Admin\\" | \\"User\\" | \\"SetSms\\")} RoleType - Enumeration of Role Type
**/

/**
 * @typedef CreateOrUpdateUserInput
 * @property {number} userId - 用户ID(ID来自User表)
 * @property {(\\"View\\" | \\"Operate\\" | \\"Auth\\" | \\"Search\\" | \\"Delete\\" | \\"UserManage\\" | \\"UserConfig\\" | \\"SetTime\\" | \\"SetNetwork\\" | \\"SetSms\\" | \\"SystemManage\\")[]} userRights - 用户权限
**/

/**
 * @typedef Abc
 * @property {string} id
 * @property {boolean} isLow
**/

/**
  * @typedef {(Abc[])} ArrayOfAbc
**/

/**
 * @typedef NumberArrayEnumModel
 * @property {(\\"0\\" | \\"1\\" | \\"2\\" | \\"4\\" | \\"8\\")[]} foo
 * @property {(\\"0\\" | \\"1\\" | \\"2\\" | \\"3\\")[]} bar
**/

/**
 * @typedef Error
 * @property {number} code
 * @property {string} message
 * @property {string} fields
**/

/**
 * @typedef PagedResultDto
 * @property {number} totalCount
 * @property {T[]} items
**/

/**
 * @typedef AuditLogListDto
 * @property {number} userId
 * @property {number} id
**/

/**
 * @typedef JsonResult - 接口返回结果
 * @property {boolean} result - 结果
 * @property {\\"Success\\" | \\"Timeout\\" | \\"Fail\\" | \\"Expired\\" | \\"Error\\" | \\"InternalServerError\\" | \\"InvalidAnonymousAccess\\" | \\"UserSessionExpired\\" | \\"UserIsBinded\\"} code - 代码
 * @property {string} data - 数据
 * @property {string} message - 消息
**/"
`;
