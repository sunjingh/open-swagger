/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger-core
 * @see https://www.npmjs.com/package/free-swagger
 * @title Crm2所有接口
 * @description 所有api
 * @fileDescription 公告通知控制器
 * @version v1
}
**/

import axios from "axios";

/**
 * @description 根据查询条件获取公告通知列表。
 * @param {SearchNoticeList_In} params
 **/
export const searchNoticeListByPost = (params) =>
  axios.request({
    url: `/api/Notice/SearchNoticeList`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 根据公告通知Id获取公告通知信息
 * @param {GetNoticeById_In} params
 **/
export const getNoticeByIdByPost = (params) =>
  axios.request({
    url: `/api/Notice/GetNoticeById`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 添加公告通知信息
 * @param {FormData} params
 **/
export const addNoticeByPost = (params) =>
  axios.request({
    url: `/api/Notice/AddNotice`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 修改公告通知信息
 * @param {FormData} params
 **/
export const updateNoticeByPost = (params) =>
  axios.request({
    url: `/api/Notice/UpdateNotice`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 删除公告通知信息
 * @param {DeleteNotice_In} params
 **/
export const deleteNoticeByPost = (params) =>
  axios.request({
    url: `/api/Notice/DeleteNotice`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 撤销公告通知信息，当发布状态为发布状态，可操作，撤销后状态变更为撤销
 * @param {RevokeNotice_In} params
 **/
export const revokeNoticeByPost = (params) =>
  axios.request({
    url: `/api/Notice/RevokeNotice`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 设置已读公告通知信息。
 * @param {SetIsReadNotice_In} params
 **/
export const setIsReadNoticeByPost = (params) =>
  axios.request({
    url: `/api/Notice/SetIsReadNotice`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 根据通告id获取已读的人员列表
 * @param {GetNoticeBrowseListById_In} params
 **/
export const getNoticeBrowseListByIdByPost = (params) =>
  axios.request({
    url: `/api/Notice/GetNoticeBrowseListById`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 根据用户id查询该用户发布的通告列表
 * @param {GetNoticeListByUserId_In} params
 **/
export const getNoticeListByUserIdByPost = (params) =>
  axios.request({
    url: `/api/Notice/GetNoticeListByUserId`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 获取文件[方案1]
 * @param {Object} params
 * @param {string} params.attId
 **/
export const downLoadByGet = (params) =>
  axios.request({
    url: `/api/Notice/DownLoad`,
    method: "get",
    params: params,
    data: {}
  });

/**
 * @description 富文本上传图片[方案1]
 * @param {FormData} params
 **/
export const uploadImageByPost = (params) =>
  axios.request({
    url: `/api/Notice/UploadImage`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 获取文件[方案2]
 * @param {Object} params
 * @param {string} params.attId
 * @param {string} params.noticeId
 **/
export const downLoadNewByGet = (params) =>
  axios.request({
    url: `/api/Notice/DownLoadNew`,
    method: "get",
    params: params,
    data: {}
  });

/**
 * @description 富文本上传图片[方案2]
 * @param {FormData} params
 **/
export const uploadImageNewByPost = (params) =>
  axios.request({
    url: `/api/Notice/UploadImageNew`,
    method: "post",
    params: {},
    data: params
  });

/**
 * @description 富文本心跳数据保持
 * @param {Object} params
 * @param {string} params.noticeId
 **/
export const noticeTextHeartbeatByGet = (params) =>
  axios.request({
    url: `/api/Notice/NoticeTextHeartbeat`,
    method: "get",
    params: params,
    data: {}
  });

/**
 * @description 生成当前controller所有TypeScript模型
 **/
export const generateThisControllerModelToTsByPut = () =>
  axios.request({
    url: `/api/Notice/GenerateThisControllerModelToTs`,
    method: "put",
    params: {},
    data: {}
  });
