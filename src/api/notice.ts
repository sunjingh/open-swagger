/* eslint-disable */
// @ts-nocheck

/**
 * generated by free-swagger-core
 * @see https://www.npmjs.com/package/free-swagger
 * @title Crm2所有接口
 * @description 所有api
 * @fileDescription 公告通知控制器
 * @version v1
}
**/

import {
  SearchNoticeList_In,
  SearchNoticeList_OutApiTableOut,
  GetNoticeById_In,
  GetNoticeById_Out,
  AddNotice_Out,
  UpdateNotice_Out,
  DeleteNotice_In,
  DeleteNotice_Out,
  RevokeNotice_In,
  RevokeNotice_Out,
  SetIsReadNotice_In,
  SetIsReadNotice_Out,
  GetNoticeBrowseListById_In,
  GetNoticeBrowseListById_Out,
  GetNoticeListByUserId_In,
  GetNoticeListByUserId_OutApiTableOut,
  Stream
} from "./interface/index.ts";
import axios from "axios";

/** 根据查询条件获取公告通知列表。 */
export const searchNoticeListByPost = (params: SearchNoticeList_In) =>
  axios.request<SearchNoticeList_OutApiTableOut>({
    url: `/api/Notice/SearchNoticeList`,
    method: "post",
    params: {},
    data: params
  });

/** 根据公告通知Id获取公告通知信息 */
export const getNoticeByIdByPost = (params: GetNoticeById_In) =>
  axios.request<GetNoticeById_Out>({
    url: `/api/Notice/GetNoticeById`,
    method: "post",
    params: {},
    data: params
  });

/** 添加公告通知信息 */
export const addNoticeByPost = (params: FormData) =>
  axios.request<AddNotice_Out>({
    url: `/api/Notice/AddNotice`,
    method: "post",
    params: {},
    data: params
  });

/** 修改公告通知信息 */
export const updateNoticeByPost = (params: FormData) =>
  axios.request<UpdateNotice_Out>({
    url: `/api/Notice/UpdateNotice`,
    method: "post",
    params: {},
    data: params
  });

/** 删除公告通知信息 */
export const deleteNoticeByPost = (params: DeleteNotice_In) =>
  axios.request<DeleteNotice_Out>({
    url: `/api/Notice/DeleteNotice`,
    method: "post",
    params: {},
    data: params
  });

/** 撤销公告通知信息，当发布状态为发布状态，可操作，撤销后状态变更为撤销 */
export const revokeNoticeByPost = (params: RevokeNotice_In) =>
  axios.request<RevokeNotice_Out>({
    url: `/api/Notice/RevokeNotice`,
    method: "post",
    params: {},
    data: params
  });

/** 设置已读公告通知信息。 */
export const setIsReadNoticeByPost = (params: SetIsReadNotice_In) =>
  axios.request<SetIsReadNotice_Out>({
    url: `/api/Notice/SetIsReadNotice`,
    method: "post",
    params: {},
    data: params
  });

/** 根据通告id获取已读的人员列表 */
export const getNoticeBrowseListByIdByPost = (params: GetNoticeBrowseListById_In) =>
  axios.request<GetNoticeBrowseListById_Out[]>({
    url: `/api/Notice/GetNoticeBrowseListById`,
    method: "post",
    params: {},
    data: params
  });

/** 根据用户id查询该用户发布的通告列表 */
export const getNoticeListByUserIdByPost = (params: GetNoticeListByUserId_In) =>
  axios.request<GetNoticeListByUserId_OutApiTableOut>({
    url: `/api/Notice/GetNoticeListByUserId`,
    method: "post",
    params: {},
    data: params
  });

/** 获取文件[方案1] */
export const downLoadByGet = (params: { attId?: string }) =>
  axios.request<any>({
    url: `/api/Notice/DownLoad`,
    method: "get",
    params: params,
    data: {}
  });

/** 富文本上传图片[方案1] */
export const uploadImageByPost = (params: FormData) =>
  axios.request<any>({
    url: `/api/Notice/UploadImage`,
    method: "post",
    params: {},
    data: params
  });

/** 获取文件[方案2] */
export const downLoadNewByGet = (params: { attId?: string; noticeId?: string }) =>
  axios.request<any>({
    url: `/api/Notice/DownLoadNew`,
    method: "get",
    params: params,
    data: {}
  });

/** 富文本上传图片[方案2] */
export const uploadImageNewByPost = (params: FormData) =>
  axios.request<any>({
    url: `/api/Notice/UploadImageNew`,
    method: "post",
    params: {},
    data: params
  });

/** 富文本心跳数据保持 */
export const noticeTextHeartbeatByGet = (params: { noticeId?: string }) =>
  axios.request<any>({
    url: `/api/Notice/NoticeTextHeartbeat`,
    method: "get",
    params: params,
    data: {}
  });

/** 生成当前controller所有TypeScript模型 */
export const generateThisControllerModelToTsByPut = () =>
  axios.request<Stream>({
    url: `/api/Notice/GenerateThisControllerModelToTs`,
    method: "put",
    params: {},
    data: {}
  });
